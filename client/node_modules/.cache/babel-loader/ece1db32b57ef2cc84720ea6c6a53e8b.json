{"ast":null,"code":"import { FETCH_ALL, FETCH_BY_SEARCH, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\nimport * as api from '../api/index.js';\nexport const getPosts = page => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.fetchPosts();\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}; //communicates with the backend. const{data} destructers the data.\n//getPostsBySearch accepts searchQuery as a parameter.\n\nexport const getPostsBySearch = searchQuery => async dispatch => {\n  try {\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsBySearch(searchQuery); //dispatch will display the posts on the screen\n\n    dispatch({\n      type: FETCH_BY_SEARCH,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createPost = post => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likePost = id => async dispatch => {\n  const user = JSON.parse(localStorage.getItem('profile'));\n\n  try {\n    const {\n      data\n    } = await api.likePost(id, user === null || user === void 0 ? void 0 : user.token);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["C:/Users/1867792/Uploader/witsie/client/src/actions/posts.js"],"names":["FETCH_ALL","FETCH_BY_SEARCH","CREATE","UPDATE","DELETE","LIKE","api","getPosts","page","dispatch","data","fetchPosts","type","payload","error","console","log","getPostsBySearch","searchQuery","fetchPostsBySearch","createPost","post","updatePost","id","likePost","user","JSON","parse","localStorage","getItem","token","deletePost"],"mappings":"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","sourcesContent":["import { FETCH_ALL, FETCH_BY_SEARCH ,CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\r\nimport * as api from '../api/index.js';\r\n\r\nexport const getPosts = (page) => async (dispatch) => {\r\n  try {\r\n    const { data } = await api.fetchPosts();\r\n\r\n    dispatch({ type: FETCH_ALL, payload: data });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n\r\n//communicates with the backend. const{data} destructers the data.\r\n//getPostsBySearch accepts searchQuery as a parameter.\r\nexport const getPostsBySearch = (searchQuery) => async(dispatch) => {\r\ntry {\r\n  const { data: { data } } = await api.fetchPostsBySearch(searchQuery);\r\n\r\n  //dispatch will display the posts on the screen\r\n  dispatch({ type: FETCH_BY_SEARCH, payload: data });\r\n} catch (error) {\r\n  console.log(error)\r\n}\r\n};\r\n\r\n\r\n\r\nexport const createPost = (post) => async (dispatch) => {\r\n  try {\r\n    const { data } = await api.createPost(post);\r\n\r\n    dispatch({ type: CREATE, payload: data });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const updatePost = (id, post) => async (dispatch) => {\r\n  try {\r\n    const { data } = await api.updatePost(id, post);\r\n\r\n    dispatch({ type: UPDATE, payload: data });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const likePost = (id) => async (dispatch) => {\r\n  const user = JSON.parse(localStorage.getItem('profile'));\r\n\r\n  try {\r\n    const { data } = await api.likePost(id, user?.token);\r\n\r\n    dispatch({ type: LIKE, payload: data });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const deletePost = (id) => async (dispatch) => {\r\n  try {\r\n    await await api.deletePost(id);\r\n\r\n    dispatch({ type: DELETE, payload: id });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}