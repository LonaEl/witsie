{"ast":null,"code":"import { FETCH_ALL, FETCH_BY_SEARCH, START_LOADING, END_LOADING, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\nimport * as api from '../api/index.js';\nexport const getPosts = page => async dispatch => {\n  try {\n    dispatch({\n      type: ST\n    });\n    const {\n      data\n    } = await api.fetchPosts(page);\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}; //communicates with the backend. const{data} destructers the data.\n//getPostsBySearch accepts searchQuery as a parameter.\n\nexport const getPostsBySearch = searchQuery => async dispatch => {\n  try {\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsBySearch(searchQuery); //dispatch will display the posts on the screen\n\n    dispatch({\n      type: FETCH_BY_SEARCH,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createPost = post => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likePost = id => async dispatch => {\n  const user = JSON.parse(localStorage.getItem('profile'));\n\n  try {\n    const {\n      data\n    } = await api.likePost(id, user === null || user === void 0 ? void 0 : user.token);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["C:/Users/1867792/Uploader/witsie/client/src/actions/posts.js"],"names":["FETCH_ALL","FETCH_BY_SEARCH","START_LOADING","END_LOADING","CREATE","UPDATE","DELETE","LIKE","api","getPosts","page","dispatch","type","ST","data","fetchPosts","payload","error","console","log","getPostsBySearch","searchQuery","fetchPostsBySearch","createPost","post","updatePost","id","likePost","user","JSON","parse","localStorage","getItem","token","deletePost"],"mappings":"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","sourcesContent":["import { FETCH_ALL, FETCH_BY_SEARCH , START_LOADING, END_LOADING, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\r\nimport * as api from '../api/index.js';\r\n\r\nexport const getPosts = (page) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: ST})\r\n    const { data } = await api.fetchPosts(page);\r\n\r\n    dispatch({ type: FETCH_ALL, payload: data });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n\r\n//communicates with the backend. const{data} destructers the data.\r\n//getPostsBySearch accepts searchQuery as a parameter.\r\nexport const getPostsBySearch = (searchQuery) => async(dispatch) => {\r\ntry {\r\n  const { data: { data } } = await api.fetchPostsBySearch(searchQuery);\r\n\r\n  //dispatch will display the posts on the screen\r\n  dispatch({ type: FETCH_BY_SEARCH, payload: data });\r\n} catch (error) {\r\n  console.log(error)\r\n}\r\n};\r\n\r\n\r\n\r\nexport const createPost = (post) => async (dispatch) => {\r\n  try {\r\n    const { data } = await api.createPost(post);\r\n\r\n    dispatch({ type: CREATE, payload: data });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const updatePost = (id, post) => async (dispatch) => {\r\n  try {\r\n    const { data } = await api.updatePost(id, post);\r\n\r\n    dispatch({ type: UPDATE, payload: data });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const likePost = (id) => async (dispatch) => {\r\n  const user = JSON.parse(localStorage.getItem('profile'));\r\n\r\n  try {\r\n    const { data } = await api.likePost(id, user?.token);\r\n\r\n    dispatch({ type: LIKE, payload: data });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const deletePost = (id) => async (dispatch) => {\r\n  try {\r\n    await await api.deletePost(id);\r\n\r\n    dispatch({ type: DELETE, payload: id });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}